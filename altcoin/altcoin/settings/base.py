"""
Django settings for altcoin project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
# This is the same level as Djangoâ€™s default logging config, except that the default config only displays log records when DEBUG=True. Django does not log many such INFO level messages.
# With this config, however, you can also set the environment variable DJANGO_LOG_LEVEL=DEBUG
DEBUG = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_rest_passwordreset',
    'altcoin.wallet.apps.WalletConfig',
    'altcoin.address.apps.AddressConfig',
    'altcoin.unspent.apps.UnspentConfig',
    'altcoin.send.apps.SendConfig',
    'altcoin.fee.apps.FeeConfig',
    'altcoin.user.apps.UserConfig',
    'altcoin.txn.apps.TxnConfig',
    'altcoin.webhook.apps.WebhookConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
#    'altcoin.authentication.SettingsBackend',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'altcoin.errors.ExceptionHandleMiddleware',

]

ROOT_URLCONF = 'altcoin.urls'

#AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
#AUTHENTICATION_BACKENDS = ('altcoin.authentication.SettingsBackend',)
AUTH_USER_MODEL = 'user.User'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
#        'rest_framework.authentication.BasicAuthentication',
#        'rest_framework.authentication.SessionAuthentication',
#        'altcoin.authentication.SettingsBackend',
#        'rest_framework.authentication.TokenAuthentication',
        'altcoin.authentication.ExpiringTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]

}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'altcoin.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

#APPEND_SLASH = False


with open(os.environ.get('MYSITE_CONFIG')) as f:
 configs = json.loads(f.read())
def get_env_var(setting, configs=configs):
 try:
     val = configs[setting]
     if val == 'True':
         val = True
     elif val == 'False':
         val = False
     return val
 except KeyError:
     error_msg = "ImproperlyConfigured: Set {0} environment      variable".format(setting)
     raise ImproperlyConfigured(error_msg)


def get_coin_env_var(server, property):
 try:
     url = get_env_var(server)
     val = url[property]
     return val
 except KeyError:
     error_msg = "ImproperlyConfigured: Set {0} environment      variable".format(server)
     raise ImproperlyConfigured(error_msg)

proxy = False

def get_url(coin_type,action):
    if coin_type == 'BTC':
        if proxy:
            if action == 'unspent':
                print('coin unspent proxy ')
                return 'https://17ccc7fe-3c2b-4083-9e2f-f2fcde0bba8e.mock.pstmn.io/unspent'
            elif action == 'createraw':
                return 'https://bbc4c13c-28a9-4406-925e-87384365d172.mock.pstmn.io/rawtransaction'
            elif action == 'fundraw':
                return 'https://13a3da66-9f25-499e-a7e3-1f5bd7292f24.mock.pstmn.io/fundraw'
            elif action == 'signtxn':
                return 'https://66f49c90-24e2-4d2b-891d-5746233c8ae7.mock.pstmn.io/sign'
            elif action == 'sendtxn':
                return 'https://66f49c90-24e2-4d2b-891d-5746233c8ae7.mock.pstmn.io/send'
            else:
                return get_coin_env_var(coin_type, 'BTC_SERVER')
        else:
            return get_coin_env_var(coin_type, 'BTC_SERVER')
    elif coin_type == 'LTC':
        if proxy:
            if action == 'unspent':
                return 'https://17ccc7fe-3c2b-4083-9e2f-f2fcde0bba8e.mock.pstmn.io/unspent'
            elif action == 'createraw':
                return 'https://bbc4c13c-28a9-4406-925e-87384365d172.mock.pstmn.io/rawtransaction'
            elif action == 'fundraw':
                return 'https://13a3da66-9f25-499e-a7e3-1f5bd7292f24.mock.pstmn.io/fundraw'
            elif action == 'signtxn':
                return 'https://66f49c90-24e2-4d2b-891d-5746233c8ae7.mock.pstmn.io/sign'
            elif action == 'sendtxn':
                return 'https://66f49c90-24e2-4d2b-891d-5746233c8ae7.mock.pstmn.io/send'
        else:
            return get_coin_env_var(coin_type, 'LTC_SERVER')
    else:
        return None
#get secret key
SECRET_KEY = get_env_var('SECRET_KEY')

TOKEN_EXPIRED_AFTER_SECONDS = 86400

#DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME - time in hours about how long the token is active (Default: 24)
DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME = 24

#DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE - will cause a 200 to be returned on POST ${API_URL}/reset_password/ even if the user doesn't exist in the databse (Default: False)
DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = False
#DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD - allows password reset for a user that does not have a usable password (Default: True)
DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} msecs={msecs} path={pathname} file={filename} funcName={funcName} module={module} {process:d} {name} {lineno} {thread:d} {message}',
            'style': '{',
        },

    },
    'handlers': {
        'file': {
            'level': 'INFO',
            #'class': 'logging.FileHandler',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': '/Users/ashu/opt/python_debug.log',
            'maxBytes': 50000,
            'formatter':'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'app_logger':{
			'handlers':['file'],
			'level':'INFO',
			'propagate':False,
		},
    },
}


SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))
# Find templates in the same folder as settings.py.
print('**************************'+SETTINGS_PATH)
TEMPLATE_DIRS = (
    os.path.join(SETTINGS_PATH, 'templates'),
)